import mongoose from 'mongoose';
import dotenv from 'dotenv';
import StageCategory from '../models/stageCategory.model.js';
import Stage from '../models/stage.model.js';

dotenv.config();

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URL)
  .then(() => console.log('‚úÖ Connected to MongoDB'))
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

// Create sample stage categories
const createSampleStageCategories = async () => {
  try {
    console.log('üìö Creating sample stage categories...');
    
    // First, get all existing stages
    const stages = await Stage.find({});
    console.log(`üìä Found ${stages.length} existing stages`);
    
    // Create category definitions
    const categoryDefinitions = [
      {
        name: 'ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿäÿ©',
        description: 'ÿßŸÑŸÖÿ±ÿßÿ≠ŸÑ ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ© ŸÖŸÜ ÿßŸÑÿµŸÅ ÿßŸÑÿ£ŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ≥ÿßÿØÿ≥ ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿä',
        stages: stages.filter(s => s.name.includes('ÿßÿ®ÿ™ÿØÿßÿ¶Ÿä')).map(s => s._id),
        status: 'active'
      },
      {
        name: 'ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ•ÿπÿØÿßÿØŸäÿ©',
        description: 'ÿßŸÑŸÖÿ±ÿßÿ≠ŸÑ ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ© ŸÖŸÜ ÿßŸÑÿµŸÅ ÿßŸÑÿ£ŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ´ÿßŸÑÿ´ ÿßŸÑÿ•ÿπÿØÿßÿØŸä',
        stages: stages.filter(s => s.name.includes('ÿ•ÿπÿØÿßÿØŸä')).map(s => s._id),
        status: 'active'
      },
      {
        name: 'ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ´ÿßŸÜŸàŸäÿ©',
        description: 'ÿßŸÑŸÖÿ±ÿßÿ≠ŸÑ ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ© ŸÖŸÜ ÿßŸÑÿµŸÅ ÿßŸÑÿ£ŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ´ÿßŸÑÿ´ ÿßŸÑÿ´ÿßŸÜŸàŸä',
        stages: stages.filter(s => s.name.includes('ÿ´ÿßŸÜŸàŸä')).map(s => s._id),
        status: 'active'
      },
      {
        name: 'ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ¨ÿßŸÖÿπŸäÿ©',
        description: 'ÿßŸÑŸÖÿ±ÿßÿ≠ŸÑ ÿßŸÑÿØÿ±ÿßÿ≥Ÿäÿ© ŸÖŸÜ ÿßŸÑÿ≥ŸÜÿ© ÿßŸÑÿ£ŸàŸÑŸâ ÿ•ŸÑŸâ ÿßŸÑÿ±ÿßÿ®ÿπÿ© ÿßŸÑÿ¨ÿßŸÖÿπŸäÿ©',
        stages: stages.filter(s => s.name.includes('ÿ¨ÿßŸÖÿπÿ©')).map(s => s._id),
        status: 'active'
      }
    ];
    
    // Create categories
    for (const catDef of categoryDefinitions) {
      if (catDef.stages.length > 0) {
        const existingCategory = await StageCategory.findOne({ name: catDef.name });
        if (!existingCategory) {
          const category = await StageCategory.create(catDef);
          console.log(`‚úÖ Created category: ${category.name} with ${catDef.stages.length} stages`);
        } else {
          console.log(`‚è≠Ô∏è Category already exists: ${catDef.name}`);
        }
      } else {
        console.log(`‚ö†Ô∏è No stages found for category: ${catDef.name}`);
      }
    }
    
    // Update stages to include category references
    console.log('üîÑ Updating stages with category references...');
    
    for (const catDef of categoryDefinitions) {
      if (catDef.stages.length > 0) {
        const category = await StageCategory.findOne({ name: catDef.name });
        if (category) {
          await Stage.updateMany(
            { _id: { $in: catDef.stages } },
            { category: category._id }
          );
          console.log(`‚úÖ Updated ${catDef.stages.length} stages with category: ${catDef.name}`);
        }
      }
    }
    
    console.log('‚úÖ Sample stage categories creation completed!');
  } catch (error) {
    console.error('‚ùå Error creating stage categories:', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå MongoDB connection closed');
  }
};

// Run the script
createSampleStageCategories();
